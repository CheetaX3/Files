import os
import json
from datetime import timezone, datetime, timedelta
from dotenv import load_dotenv
import telebot
from telebot import types


BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DATA_FILE = os.path.join(BASE_DIR, "users.json")
MAX_SLEEP_HOURS = 24
STATS_RECORDS_COUNT = 5
DEFAULT_TIMEZONE = 0
MIN_TIMEZONE = -12
MAX_TIMEZONE = 14
MIN_QUALITY = 1
MAX_QUALITY = 10


load_dotenv()
bot = telebot.TeleBot(os.getenv("TOKEN"))

# –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users_data = {}
users_timezone = {}

@bot.message_handler(commands=["start"])
def start(message):
    user_id = str(message.from_user.id)

    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)

        if user_id in data:
            del data[user_id]

            with open(DATA_FILE, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    button1 = types.KeyboardButton("üò¥ –£—Å–Ω—É–ª")
    button2 = types.KeyboardButton("üåû –ü—Ä–æ—Å–Ω—É–ª—Å—è")
    button3 = types.KeyboardButton("üìä –û—Ü–µ–Ω–∫–∞")
    button4 = types.KeyboardButton("üìù –ó–∞–º–µ—Ç–∫–∞")
    button5 = types.KeyboardButton("‚ûï –ó–∞–ø–∏—Å—å")
    button6 = types.KeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    button7 = types.KeyboardButton("‚è± –ß–∞—Å. –ø–æ—è—Å")
    markup.add(button1, button2, button3, button4, button5, button6, button7)
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç!\n"
        "–Ø –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–Ω–∞!\n"
        "\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏:\n"
        "üò¥ –£—Å–Ω—É–ª - –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–Ω–∞\n"
        "üåû –ü—Ä–æ—Å–Ω—É–ª—Å—è - –≤—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è\n"
        "üìä –û—Ü–µ–Ω–∫–∞ - –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞ –æ—Ç 1 –¥–æ 10\n"
        "üìù –ó–∞–º–µ—Ç–∫–∞ - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫\n"
        "‚ûï –ó–∞–ø–∏—Å—å - –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É\n"
        "(–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –Ω–∞—á–∞–ª–æ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Å–Ω–∞,\n"
        "\n"
        "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—è—Ç—å –∑–∞–ø–∏—Å–µ–π\n"
        "‚è± –ß–∞—Å. –ø–æ—è—Å: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞\n"
        "(–≤–≤–µ–¥–∏—Ç–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç UTC. –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é MSK)",
        reply_markup=markup
    )
    user_id = message.from_user.id
    users_data[user_id] = {}
    users_timezone[user_id] = DEFAULT_TIMEZONE

@bot.message_handler(func=lambda msg: msg.text == "‚è± –ß–∞—Å. –ø–æ—è—Å")
def timezone_button(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç UTC –æ—Ç {MIN_TIMEZONE} –¥–æ {MAX_TIMEZONE} (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é MSK) (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é MSK)")
    bot.register_next_step_handler(message, save_user_timezone)

def save_user_timezone(message):
    user_id = message.from_user.id
    try:
        user_timezone = int(message.text)
    except ValueError:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç UTC –æ—Ç {MIN_TIMEZONE} –¥–æ {MAX_TIMEZONE} (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é MSK)")
        bot.register_next_step_handler(message, save_user_timezone)
        return
    if user_timezone not in range(MIN_TIMEZONE, MAX_TIMEZONE):
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç UTC –æ—Ç {MIN_TIMEZONE} –¥–æ {MAX_TIMEZONE} (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é MSK)")
        bot.register_next_step_handler(message, save_user_timezone)
        return
    users_timezone[user_id] = user_timezone
    bot.send_message(message.chat.id, "–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")

@bot.message_handler(func=lambda msg: msg.text == "üò¥ –£—Å–Ω—É–ª")
def sleep_button(message):
    user_id = message.from_user.id
    now = datetime.now() + timedelta(hours=users_timezone[user_id])
    now_str = now.strftime("%H:%M:%S %d-%m-%Y")
    users_data[user_id] = {"start_time": now_str}
    bot.send_message(message.chat.id, f"–í—Ä–µ–º—è —Å–Ω–∞ –∑–∞–ø–∏—Å–∞–Ω–æ!") 

@bot.message_handler(func=lambda msg: msg.text == "üåû –ü—Ä–æ—Å–Ω—É–ª—Å—è")
def wake_button(message):
    user_id = message.from_user.id
    now = datetime.now() + timedelta(hours=users_timezone[user_id])
    now_str = now.strftime("%H:%M:%S %d-%m-%Y")
    
    try:
        start_time = datetime.strptime(users_data[user_id]["start_time"], "%H:%M:%S %d-%m-%Y")
    except KeyError:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üò¥ –£—Å–Ω—É–ª'")
        return

    delta = now - start_time
    hours = delta.total_seconds() / 3600
    if hours < MAX_SLEEP_HOURS:
        users_data[user_id]["stop_time"] = now_str
        users_data[user_id]["duration"] = hours
        bot.send_message(message.chat.id, f"–í—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∞–Ω–æ!")
        bot.send_message(message.chat.id, f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üìä –û—Ü–µ–Ω–∫–∞ –∏ –ø—Ä–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω—É, –∞ —Ç–∞–∫–∂–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üìù –ó–∞–º–µ—Ç–∫–∞ –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
    else:
        bot.send_message(message.chat.id, "–ù–∞–≤—Ä—è–¥ –ª–∏ –≤—ã —Å–ø–∏—Ç–µ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ üòâ")

@bot.message_handler(func=lambda msg: msg.text == "üìä –û—Ü–µ–Ω–∫–∞")
def quality_button(message):
    user_id = message.from_user.id 
    try:
        start_time = datetime.strptime(users_data[user_id]["start_time"], "%H:%M:%S %d-%m-%Y")
        stop_time = datetime.strptime(users_data[user_id]["stop_time"], "%H:%M:%S %d-%m-%Y")
    except KeyError:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–Ω–µ")
        return
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10")
    bot.register_next_step_handler(message, save_user_quality)

def save_user_quality(message):
    user_id = message.from_user.id
    if not message.text.isdigit():
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10")
        bot.register_next_step_handler(message, save_user_quality)
        return
    quality = int(message.text)
    if quality not in range(1, 11):
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10")
        bot.register_next_step_handler(message, save_user_quality)
        return
    users_data[user_id]["quality"] = quality
    bot.send_message(message.chat.id, "–û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")

@bot.message_handler(func=lambda msg: msg.text == "üìù –ó–∞–º–µ—Ç–∫–∞")
def note_button(message):
    user_id = message.from_user.id 
    try:
        start_time = datetime.strptime(users_data[user_id]["start_time"], "%H:%M:%S %d-%m-%Y")
        stop_time = datetime.strptime(users_data[user_id]["stop_time"], "%H:%M:%S %d-%m-%Y")
    except KeyError:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–Ω–µ")
        return
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É")
    bot.register_next_step_handler(message, save_user_note)

def save_user_note(message):
    user_id = message.from_user.id
    users_data[user_id]["note"] = message.text
    bot.send_message(message.chat.id, "–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")

@bot.message_handler(func=lambda msg: msg.text == "‚ûï –ó–∞–ø–∏—Å—å")
def save_message_to_json(message):
    user_id = message.from_user.id

    required_fields = ["start_time", "stop_time", "duration", "quality", "note"]
    if not all(key in users_data.get(user_id, {}) for key in required_fields):
        bot.send_message(message.chat.id, "–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è —Å–Ω–∞, –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è, –æ—Ü–µ–Ω–∫—É –∏ –∑–∞–º–µ—Ç–∫—É.")
        return

    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    else:
        data = {}

    user_id_str = str(user_id)
    entry = {
        "start_time": users_data[user_id]["start_time"],
        "stop_time": users_data[user_id]["stop_time"],
        "duration": users_data[user_id]["duration"],
        "quality": users_data[user_id]["quality"],
        "note": users_data[user_id]["note"]
    }

    if user_id_str in data:
        data[user_id_str].append(entry)
    else:
        data[user_id_str] = [entry]

    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

    bot.send_message(message.chat.id, f"""
        –í—ã 
        - —É—Å–Ω—É–ª–∏ –≤ {users_data[user_id]['start_time']}
        - –ø—Ä–æ—Å–Ω—É–ª–∏—Å—å –≤ {users_data[user_id]['stop_time']}
        - –≤—Ä–µ–º—è —Å–Ω–∞: {round(users_data[user_id]['duration'], 2)} —á–∞—Å–æ–≤
        - –æ—Ü–µ–Ω–∫–∞: {round(users_data[user_id]['quality'], 2)}
        - –∑–∞–º–µ—Ç–∫–∞: {users_data[user_id]['note']}
        """)
print(users_data)

@bot.message_handler(func=lambda msg: msg.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def statistics_button(message):
    user_id = message.from_user.id
    try:
        start_time = datetime.strptime(users_data[user_id]["start_time"], "%H:%M:%S %d-%m-%Y")
        stop_time = datetime.strptime(users_data[user_id]["stop_time"], "%H:%M:%S %d-%m-%Y")
    except KeyError:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–Ω–µ")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    else:
        bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!")
        return
    
    user_records = data.get(str(user_id), [])
    last_records = user_records[-STATS_RECORDS_COUNT:]
    aver_time = sum(record["duration"] for record in last_records) / len(last_records)
    aver_time = round(aver_time, 2)
    aver_quality = sum(record["quality"] for record in last_records) / len(last_records)
    aver_quality = round(aver_quality, 2)
    bot.send_message(message.chat.id, f"""
        –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–Ω–∞: {aver_time}
        –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {aver_quality}
        """)
    for record in last_records:
        bot.send_message(message.chat.id, f"–ó–∞–º–µ—Ç–∫–∞: {record['note']}")

bot.polling(none_stop=True, interval=0)