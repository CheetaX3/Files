import os
import json
from datetime import datetime, timedelta
from dotenv import load_dotenv
import telebot
from telebot import types

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DATA_FILE = os.path.join(BASE_DIR, "users.json")
TIME_FORMAT = "%H:%M:%S %d-%m-%Y"
MAX_SLEEP_HOURS = 24
STATS_RECORDS_COUNT = 5
DEFAULT_TIMEZONE = 0
MIN_TIMEZONE = -12
MAX_TIMEZONE = 14
MIN_QUALITY = 1
MAX_QUALITY = 10

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()
bot = telebot.TeleBot(os.getenv("TOKEN"))

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
users_data = {}
users_timezone = {}

def get_current_time(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return datetime.now() + timedelta(hours=users_timezone.get(user_id, DEFAULT_TIMEZONE))

def validate_input(value, min_val, max_val, error_message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—É"""
    try:
        num = int(value)
        if min_val <= num <= max_val:
            return num
    except ValueError:
        pass
    return None

def create_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    buttons = [
        "üò¥ –£—Å–Ω—É–ª", "üåû –ü—Ä–æ—Å–Ω—É–ª—Å—è", "üìä –û—Ü–µ–Ω–∫–∞",
        "üìù –ó–∞–º–µ—Ç–∫–∞", "‚ûï –ó–∞–ø–∏—Å—å", "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        "‚è± –ß–∞—Å. –ø–æ—è—Å"
    ]
    markup.add(*[types.KeyboardButton(btn) for btn in buttons])
    return markup

def load_user_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_user_data(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

@bot.message_handler(commands=["start"])
def start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = str(message.from_user.id)
    
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    data = load_user_data()
    if user_id in data:
        del data[user_id]
        save_user_data(data)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    users_data[message.from_user.id] = {}
    users_timezone[message.from_user.id] = DEFAULT_TIMEZONE
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    welcome_text = """
–ü—Ä–∏–≤–µ—Ç!
–Ø –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–Ω–∞!

–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏:
üò¥ –£—Å–Ω—É–ª - –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–Ω–∞
üåû –ü—Ä–æ—Å–Ω—É–ª—Å—è - –≤—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
üìä –û—Ü–µ–Ω–∫–∞ - –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞ –æ—Ç 1 –¥–æ 10
üìù –ó–∞–º–µ—Ç–∫–∞ - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫
‚ûï –ó–∞–ø–∏—Å—å - –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É
(–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –Ω–∞—á–∞–ª–æ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Å–Ω–∞,

üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—è—Ç—å –∑–∞–ø–∏—Å–µ–π
‚è± –ß–∞—Å. –ø–æ—è—Å: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
(–≤–≤–µ–¥–∏—Ç–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç UTC. –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é MSK)
"""
    bot.send_message(message.chat.id, welcome_text, reply_markup=create_keyboard())

@bot.message_handler(func=lambda msg: msg.text == "‚è± –ß–∞—Å. –ø–æ—è—Å")
def timezone_button(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç UTC –æ—Ç {MIN_TIMEZONE} –¥–æ {MAX_TIMEZONE} (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é MSK)")
    bot.register_next_step_handler(message, process_timezone_input)

def process_timezone_input(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    user_id = message.from_user.id
    timezone = validate_input(
        message.text, 
        MIN_TIMEZONE, 
        MAX_TIMEZONE,
        f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç UTC –æ—Ç {MIN_TIMEZONE} –¥–æ {MAX_TIMEZONE}"
    )
    
    if timezone is None:
        bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç UTC –æ—Ç {MIN_TIMEZONE} –¥–æ {MAX_TIMEZONE}")
        bot.register_next_step_handler(message, process_timezone_input)
        return
    
    users_timezone[user_id] = timezone
    bot.send_message(message.chat.id, "–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")

@bot.message_handler(func=lambda msg: msg.text == "üò¥ –£—Å–Ω—É–ª")
def sleep_button(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—á–∞–ª–∞ —Å–Ω–∞"""
    user_id = message.from_user.id
    now_str = get_current_time(user_id).strftime(TIME_FORMAT)
    users_data[user_id] = {"start_time": now_str}
    bot.send_message(message.chat.id, "–í—Ä–µ–º—è —Å–Ω–∞ –∑–∞–ø–∏—Å–∞–Ω–æ!")

@bot.message_handler(func=lambda msg: msg.text == "üåû –ü—Ä–æ—Å–Ω—É–ª—Å—è")
def wake_button(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è"""
    user_id = message.from_user.id
    now = get_current_time(user_id)
    now_str = now.strftime(TIME_FORMAT)
    
    try:
        start_time = datetime.strptime(users_data[user_id]["start_time"], TIME_FORMAT)
    except KeyError:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üò¥ –£—Å–Ω—É–ª'")
        return

    delta = now - start_time
    hours = delta.total_seconds() / 3600
    
    if hours < MAX_SLEEP_HOURS:
        users_data[user_id].update({
            "stop_time": now_str,
            "duration": hours
        })
        bot.send_message(message.chat.id, "–í—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∞–Ω–æ!")
        bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üìä –û—Ü–µ–Ω–∫–∞ –∏ –ø—Ä–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω—É, –∞ —Ç–∞–∫–∂–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üìù –ó–∞–º–µ—Ç–∫–∞ –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
    else:
        bot.send_message(message.chat.id, "–ù–∞–≤—Ä—è–¥ –ª–∏ –≤—ã —Å–ø–∏—Ç–µ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ üòâ")

@bot.message_handler(func=lambda msg: msg.text == "üìä –û—Ü–µ–Ω–∫–∞")
def quality_button(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏ —Å–Ω–∞"""
    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {MIN_QUALITY} –¥–æ {MAX_QUALITY}")
    bot.register_next_step_handler(message, process_quality_input)

def process_quality_input(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ—Ü–µ–Ω–∫–∏ —Å–Ω–∞"""
    user_id = message.from_user.id
    quality = validate_input(
        message.text, 
        MIN_QUALITY, 
        MAX_QUALITY,
        f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {MIN_QUALITY} –¥–æ {MAX_QUALITY}"
    )
    
    if quality is None:
        bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {MIN_QUALITY} –¥–æ {MAX_QUALITY}")
        bot.register_next_step_handler(message, process_quality_input)
        return
    
    users_data[user_id]["quality"] = quality
    bot.send_message(message.chat.id, "–û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")

@bot.message_handler(func=lambda msg: msg.text == "üìù –ó–∞–º–µ—Ç–∫–∞")
def note_button(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–º–µ—Ç–∫–∏"""
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É")
    bot.register_next_step_handler(message, process_note_input)

def process_note_input(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∑–∞–º–µ—Ç–∫–∏"""
    user_id = message.from_user.id
    users_data[user_id]["note"] = message.text
    bot.send_message(message.chat.id, "–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")

@bot.message_handler(func=lambda msg: msg.text == "‚ûï –ó–∞–ø–∏—Å—å")
def save_message_to_json(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    user_id = message.from_user.id
    user_data = users_data.get(user_id, {})
    
    required_fields = ["start_time", "stop_time", "duration", "quality", "note"]
    if not all(key in user_data for key in required_fields):
        bot.send_message(message.chat.id, "–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è —Å–Ω–∞, –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è, –æ—Ü–µ–Ω–∫—É –∏ –∑–∞–º–µ—Ç–∫—É.")
        return

    data = load_user_data()
    user_id_str = str(user_id)
    
    entry = {
        "start_time": user_data["start_time"],
        "stop_time": user_data["stop_time"],
        "duration": user_data["duration"],
        "quality": user_data["quality"],
        "note": user_data["note"]
    }

    if user_id_str in data:
        data[user_id_str].append(entry)
    else:
        data[user_id_str] = [entry]

    save_user_data(data)
    
    response = f"""
–í—ã:
- —É—Å–Ω—É–ª–∏ –≤ {user_data['start_time']}
- –ø—Ä–æ—Å–Ω—É–ª–∏—Å—å –≤ {user_data['stop_time']}
- –≤—Ä–µ–º—è —Å–Ω–∞: {round(user_data['duration'], 2)} —á–∞—Å–æ–≤
- –æ—Ü–µ–Ω–∫–∞: {user_data['quality']}
- –∑–∞–º–µ—Ç–∫–∞: {user_data['note']}
"""
    bot.send_message(message.chat.id, response)

@bot.message_handler(func=lambda msg: msg.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def statistics_button(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    user_id = str(message.from_user.id)
    data = load_user_data()
    
    if user_id not in data or not data[user_id]:
        bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!")
        return
    
    user_records = data[user_id][-STATS_RECORDS_COUNT:]
    avg_time = round(sum(record["duration"] for record in user_records) / len(user_records), 2)
    avg_quality = round(sum(record["quality"] for record in user_records) / len(user_records), 2)
    
    stats_message = f"""
–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–Ω–∞: {avg_time} —á–∞—Å–æ–≤
–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_quality}
"""
    bot.send_message(message.chat.id, stats_message)
    
    for record in user_records:
        bot.send_message(message.chat.id, f"–ó–∞–º–µ—Ç–∫–∞: {record['note']}")

if __name__ == "__main__":
    bot.polling(none_stop=True, interval=0)